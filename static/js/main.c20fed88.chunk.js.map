{"version":3,"sources":["Components/ProjectCard.js","Components/UserCard.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","minHeight","title","ProjectCard","props","classes","_useState","useState","_useState2","Object","slicedToArray","fade","setFade","useEffect","react_default","a","createElement","Fade","in","timeout","Card","className","CardActionArea","onClick","window","location","html_url","Typography","color","variant","name","description","language","concat","Fragment","display","justifyContent","details","flexDirection","pfp","minWidth","content","flexGrow","Project","CardContent","bio","CardMedia","image","avatar_url","fieldRoot","displayRoot","field","text","fontFamily","textMargin","button","marginTop","vertCenter","verticalAlign","Main","setField","_useState3","_useState4","user","setUser","_useState5","_useState6","projects","setProjects","_useState7","_useState8","projectCards","setProjCards","_useState9","_useState10","userCard","setUserCard","Grid","container","map","proj","item","xs","md","assign","key","id","pull","getUser","fetch","then","response","status","json","out","AppBar","position","Toolbar","TextField","label","placeholder","onChange","e","target","value","Button","Divider","App","CssBaseline","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c20fed88.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Card, CardActionArea, Typography, Fade } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: theme.spacing(2),\r\n    minHeight: 200 \r\n  },\r\n  title: {\r\n    margin: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nexport default function ProjectCard(props) {\r\n  const classes = useStyles();\r\n  const [fade, setFade] = useState(false)\r\n\r\n  const toUser = () => {\r\n    window.location = props.html_url\r\n  }\r\n\r\n  useEffect(() => {\r\n    setFade(true)\r\n  }, [fade]);\r\n\r\n  return (\r\n    <Fade in={fade} timeout={1000}>\r\n      <Card className={classes.root}>\r\n        <CardActionArea onClick={toUser}>\r\n          <Typography className={classes.title} color=\"primary\" variant=\"h4\">\r\n            {props.name}\r\n          </Typography>\r\n          <Typography className={classes.title} color=\"textPrimary\" variant=\"h6\">\r\n            {props.description}\r\n          </Typography>\r\n\r\n          {props.language ?\r\n          <Typography className={classes.title} color=\"textSecondary\" variant=\"subtitle1\">\r\n            {`Language: ${props.language}`}\r\n          </Typography>\r\n          : <></>\r\n          }\r\n        </CardActionArea>\r\n      </Card>\r\n    </Fade>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Card, CardContent, CardActionArea, Typography, CardMedia, Fade } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: theme.spacing(4),\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    minHeight: 256\r\n  },\r\n  title: {\r\n    margin: theme.spacing(2)\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  pfp: {\r\n    minWidth: 256,\r\n  },\r\n  content: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport default function Project(props) {\r\n  const classes = useStyles();\r\n  const [fade, setFade] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setFade(true)\r\n  }, [fade]);\r\n\r\n  const toUser = () => {\r\n    window.location = props.html_url\r\n  }\r\n\r\n  return (\r\n    <Fade in={fade} timeout={1000}>\r\n      <Card className={classes.root}>\r\n        <CardActionArea onClick={toUser}>\r\n          <CardContent>\r\n            <Typography className={classes.title} variant=\"h4\">\r\n              {props.name}\r\n            </Typography>\r\n            <Typography className={classes.title} color=\"textSecondary\" variant=\"h5\">\r\n              {props.bio}\r\n            </Typography>\r\n            <Typography className={classes.title} color=\"textSecondary\" variant=\"h5\">\r\n              {props.location}\r\n            </Typography>\r\n          </CardContent>\r\n\r\n        </CardActionArea>\r\n          <CardMedia\r\n            image={props.avatar_url}\r\n            className={classes.pfp}/>\r\n      </Card>\r\n    </Fade>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { AppBar, Toolbar, Typography, TextField, Button, Divider, Grid, } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport ProjectCard from './ProjectCard'\r\nimport UserCard from './UserCard'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  fieldRoot: {\r\n    margin: theme.spacing(4)\r\n  },\r\n  displayRoot: {\r\n    margin: theme.spacing(4)\r\n  },\r\n  field: {\r\n    margin: theme.spacing(2)\r\n  },\r\n  text: {\r\n    fontFamily: \"'Literata', serif\",\r\n  },\r\n  textMargin: {\r\n    fontFamily: \"'Literata', serif\",\r\n    margin: theme.spacing(2)\r\n  },\r\n  button: {\r\n    margin: theme.spacing(2),\r\n    marginTop: theme.spacing(3)\r\n  },\r\n  vertCenter: {\r\n    verticalAlign: 'center'\r\n  }\r\n}));\r\n\r\nexport default function Main() {\r\n  const classes = useStyles();\r\n  const [field, setField] = useState(\"CloudNineK\")\r\n  const [user, setUser] = useState({})\r\n  const [projects, setProjects] = useState([])\r\n\r\n  const [projectCards, setProjCards] = useState([])\r\n  const [userCard, setUserCard] = useState([])\r\n\r\n  useEffect(() => {\r\n  setProjCards(\r\n    <Grid container spacing={0}>\r\n    {projects.map(proj => {\r\n      return(\r\n        <Grid item xs={12} md={4}>\r\n          <ProjectCard {...proj} key={proj.id}/>\r\n        </Grid>)})\r\n    }\r\n    </Grid>\r\n  )\r\n    setUserCard(<UserCard {...user} key={user.id}/>)\r\n  }, [projects, user]);\r\n\r\n  useEffect(() => {\r\n    pull()\r\n  }, [])\r\n\r\n  const getProjects = () => {\r\n    fetch(`https://api.github.com/users/${field}/repos`)\r\n      .then(response => response.json())\r\n      .then(out => {\r\n        setProjects(out)\r\n      })\r\n  }\r\n\r\n  const getUser = () => {\r\n    fetch(`https://api.github.com/users/${field}`)\r\n      .then(response => {\r\n        if (response.status !== 200) {\r\n          return\r\n        }\r\n        return response.json()\r\n      })\r\n      .then(out => {\r\n        if (out) {\r\n          setUser(out)\r\n          getProjects()\r\n        }\r\n      })\r\n  }\r\n\r\n  const pull = () => {\r\n    getUser()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      {/* Bar */}\r\n      <AppBar position=\"static\" color=\"primary\">\r\n        <Toolbar>\r\n          <Typography className={classes.text} variant=\"h6\" color=\"inherit\">\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <div className={classes.fieldRoot}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={6}>\r\n          {/* Header + Form */}\r\n            <div>\r\n              <Typography className={classes.textMargin} variant=\"h2\">\r\n                GitSummary\r\n              </Typography>\r\n              <Typography className={classes.textMargin} color=\"textSecondary\" variant=\"h4\">\r\n                View a user's github projects\r\n              </Typography>\r\n\r\n              <TextField\r\n                className={classes.field}\r\n                label=\"Github Username\"\r\n                placeholder=\"CloudNineK\"\r\n                margin=\"normal\"\r\n                onChange={e => setField(e.target.value)}/>\r\n\r\n              <Button \r\n                variant=\"contained\" \r\n                onClick={pull}\r\n                className={classes.button}>\r\n                  View\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs={6}>\r\n            {user.name ? userCard : []}\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n\r\n      <Divider variant=\"middle\"/>\r\n\r\n      {/* User Information*/}\r\n\r\n      {/* Project Display */}\r\n      {projectCards}\r\n \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Main from './Components/Main'\n\nfunction App() {\n  return (\n    <CssBaseline>\n      <Main/>\n    </CssBaseline>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}